{"ast":null,"code":"var _jsxFileName = \"/Users/daniellesuper/Sites/elevationsoftware/src/routes/Route.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport DefaultLayout from \"../pages/_layouts/default\";\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = true;\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n\n  if (isPrivate && !signed) {\n    return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  }\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n\n\n  if (!isPrivate && signed) {\n    return React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }\n\n  const Layout = signed ? AuthLayout : DefaultLayout;\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n}\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};","map":{"version":3,"sources":["/Users/daniellesuper/Sites/elevationsoftware/src/routes/Route.jsx"],"names":["React","PropTypes","Route","Redirect","DefaultLayout","RouteWrapper","component","Component","isPrivate","rest","signed","Layout","AuthLayout","props","propTypes","bool","oneOfType","element","func","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,OAAOC,aAAP,MAA0B,2BAA1B;AAGA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,SAAS,EAAEC,SADwB;AAEnCC,EAAAA,SAFmC;AAGnC,KAAGC;AAHgC,CAAtB,EAIZ;AACD,QAAMC,MAAM,GAAG,IAAf;AAEA;;;;;AAIA,MAAIF,SAAS,IAAI,CAACE,MAAlB,EAA0B;AACxB,WAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAED;;;;;;AAIA,MAAI,CAACF,SAAD,IAAcE,MAAlB,EAA0B;AACxB,WAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAMC,MAAM,GAAGD,MAAM,GAAGE,UAAH,GAAgBR,aAArC;AAEA;;;;AAGA,SACE,oBAAC,KAAD,oBACMK,IADN;AAEE,IAAA,MAAM,EAAEI,KAAK,IACX,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAUD;AAEDR,YAAY,CAACS,SAAb,GAAyB;AACvBN,EAAAA,SAAS,EAAEP,SAAS,CAACc,IADE;AAEvBT,EAAAA,SAAS,EAAEL,SAAS,CAACe,SAAV,CAAoB,CAACf,SAAS,CAACgB,OAAX,EAAoBhB,SAAS,CAACiB,IAA9B,CAApB,EAAyDC;AAF7C,CAAzB;AAKAd,YAAY,CAACe,YAAb,GAA4B;AAC1BZ,EAAAA,SAAS,EAAE;AADe,CAA5B","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport DefaultLayout from \"../pages/_layouts/default\";\n\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = true;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n  if (!isPrivate && signed) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  const Layout = signed ? AuthLayout : DefaultLayout;\n\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n  return (\n    <Route\n      {...rest}\n      render={props => (\n        <Layout>\n          <Component {...props} />\n        </Layout>\n      )}\n    />\n  );\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};\n"]},"metadata":{},"sourceType":"module"}