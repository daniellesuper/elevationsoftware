{"ast":null,"code":"var _jsxFileName = \"/Users/daniellesuper/Sites/elevationsoftware/src/components/Form/Form.js\";\n// Dependencies\nimport React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      message: ''\n    }; // To ensure 'this' when calling 'this.updateField' refers to Form and not Field, we do:\n\n    this.updateField = this.updateField.bind(this);\n  } // Field could be 'name', 'email', or 'message'\n  // Value is whatever the user types into the input field.\n\n\n  updateField(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Name\",\n      onChange: event => this.updateField('name', event.target.value),\n      value: this.state.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(Field, {\n      label: \"Email\",\n      onChange: event => this.updateField('email', event.target.value),\n      value: this.state.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(Field, {\n      label: \"Message\",\n      onChange: event => this.updateField('message', event.target.value)\n      /* This should be written like 'textarea' */\n      ,\n      textarea: true,\n      value: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(Button, {\n      email: \"danielle.super7@gmail.com\",\n      formValues: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/Users/daniellesuper/Sites/elevationsoftware/src/components/Form/Form.js"],"names":["React","Component","Form","constructor","props","state","name","email","message","updateField","bind","field","value","setState","render","event","target"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAGA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAC3BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb,CAFiB,CAOjB;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD,GAV0B,CAY3B;AACA;;;AACAD,EAAAA,WAAW,CAACE,KAAD,EAAQC,KAAR,EAAe;AACxB,SAAKC,QAAL,CAAc;AAAE,OAACF,KAAD,GAASC;AAAX,KAAd;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,QAAQ,EAAGC,KAAD,IAAW,KAAKN,WAAL,CAAiB,MAAjB,EAAyBM,KAAK,CAACC,MAAN,CAAaJ,KAAtC,CAFvB;AAGE,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,IAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAQE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,QAAQ,EAAGS,KAAD,IAAW,KAAKN,WAAL,CAAiB,OAAjB,EAA0BM,KAAK,CAACC,MAAN,CAAaJ,KAAvC,CAFvB;AAGE,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWE,KAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAcE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,QAAQ,EAAGQ,KAAD,IAAW,KAAKN,WAAL,CAAiB,SAAjB,EAA4BM,KAAK,CAACC,MAAN,CAAaJ,KAAzC;AACrB;AAHF;AAIE,MAAA,QAAQ,EAAE,IAJZ;AAKE,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWG,OALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,EAsBE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,2BADR;AAEE,MAAA,UAAU,EAAE,KAAKH,KAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBF,CADF;AA6BD;;AAhD0B;;AAmD7B,eAAeH,IAAf","sourcesContent":["// Dependencies\nimport React, { Component } from 'react';\n\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      message: '',\n    };\n    // To ensure 'this' when calling 'this.updateField' refers to Form and not Field, we do:\n    this.updateField = this.updateField.bind(this);\n  }\n\n  // Field could be 'name', 'email', or 'message'\n  // Value is whatever the user types into the input field.\n  updateField(field, value) {\n    this.setState({ [field]: value });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* Name field */}\n        <Field\n          label=\"Name\"\n          onChange={(event) => this.updateField('name', event.target.value)}\n          value={this.state.name}\n        />\n        {/* Email field */}\n        <Field\n          label=\"Email\"\n          onChange={(event) => this.updateField('email', event.target.value)}\n          value={this.state.email}\n        />\n        {/* Message textarea */}\n        <Field\n          label=\"Message\"\n          onChange={(event) => this.updateField('message', event.target.value)}\n          /* This should be written like 'textarea' */\n          textarea={true}\n          value={this.state.message}\n        />\n        {/* Submit button */}\n        <Button\n          email=\"danielle.super7@gmail.com\"\n          formValues={this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}